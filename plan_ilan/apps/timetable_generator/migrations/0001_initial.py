# Generated by Django 3.2 on 2021-06-04 15:35

from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import model_utils.fields
import plan_ilan.apps.timetable_generator.models.utils


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('web_site', '0003_auto_20210531_1030'),
    ]

    operations = [
        migrations.CreateModel(
            name='BlockedTimePeriod',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'blocked_time_periods',
                'ordering': ['timetables', 'day'],
            },
        ),
        migrations.CreateModel(
            name='Interval',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('left', models.FloatField(default=float("-inf"))),
                ('right', models.FloatField(default=float("inf"))),
            ],
            options={
                'db_table': 'intervals',
                'ordering': ['pk'],
            },
        ),
        migrations.CreateModel(
            name='RankedLesson',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rank', models.FloatField()),
                ('lesson', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ranked_lessons', to='web_site.lesson')),
            ],
            options={
                'db_table': 'ranked_lessons',
                'ordering': ['lesson', 'rank'],
            },
        ),
        migrations.CreateModel(
            name='TimeInterval',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start', plan_ilan.apps.timetable_generator.models.utils.ImprovedTimeField()),
                ('end', plan_ilan.apps.timetable_generator.models.utils.ImprovedTimeField()),
            ],
            options={
                'db_table': 'time_intervals',
                'ordering': ['start', 'end'],
            },
        ),
        migrations.CreateModel(
            name='TimetableCommonInfo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('account', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='timetables', to='web_site.account')),
            ],
            options={
                'db_table': 'timetables_common_infos',
                'ordering': ['account', 'name', 'pk'],
            },
        ),
        migrations.CreateModel(
            name='TimetableSolution',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('score', models.FloatField(editable=False)),
                ('iterations', models.IntegerField(editable=False)),
                ('is_solved', models.BooleanField(editable=False)),
                ('common_info', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='solutions', to='timetable_generator.timetablecommoninfo')),
                ('lessons', models.ManyToManyField(related_name='timetable_solutions', to='web_site.Lesson')),
            ],
            options={
                'verbose_name': 'solution',
                'db_table': 'solutions',
                'ordering': ['created', 'modified', 'pk'],
            },
        ),
        migrations.CreateModel(
            name='Timetable',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('max_num_of_days', models.IntegerField(default=7)),
                ('blocked_time_periods', models.ManyToManyField(related_name='timetables', to='timetable_generator.BlockedTimePeriod')),
                ('common_info', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='timetable_generator.timetablecommoninfo')),
                ('elective_lessons', models.ManyToManyField(related_name='timetables_elective', to='timetable_generator.RankedLesson')),
                ('elective_points_bound', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='timetables', to='timetable_generator.interval')),
                ('mandatory_lessons', models.ManyToManyField(related_name='timetables_mandatory', to='timetable_generator.RankedLesson')),
                ('semester', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='timetables', to='web_site.semester')),
            ],
            options={
                'db_table': 'timetables',
                'ordering': ['common_info', 'semester', 'created'],
            },
        ),
        migrations.AddField(
            model_name='blockedtimeperiod',
            name='blocked_time_periods',
            field=models.ManyToManyField(related_name='blocked_time_periods', to='timetable_generator.TimeInterval'),
        ),
        migrations.AddField(
            model_name='blockedtimeperiod',
            name='day',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='blocked_times', to='web_site.day'),
        ),
    ]
